<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/GeLoBeaconManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/GeLoBeaconManager</TokenIdentifier>
			<Abstract type="html">GeLoBeaconManager scans for beacons and also maintains a list of beacons it can find.
*</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
            
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/setFalloff:forId:</TokenIdentifier>
			<Abstract type="html">Sets the threshold for the specified beacon</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)setFalloff:(NSInteger)_falloff forId:(NSUInteger)_id</Declaration>
			<Parameters>
				<Parameter>
					<Name>_falloff</Name>
					<Abstract type="html">the threshold for determining if a beacon is near</Abstract>
				</Parameter><Parameter>
					<Name>_id</Name>
					<Abstract type="html">the id of the beacon to apply the threshold to</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setFalloff:forId:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/setDefaultFalloff:</TokenIdentifier>
			<Abstract type="html">Sets the default threshold to apply to beacons without a threshold of their own</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)setDefaultFalloff:(NSInteger)_falloff</Declaration>
			<Parameters>
				<Parameter>
					<Name>_falloff</Name>
					<Abstract type="html">the threshold for determining if a beacon is near</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDefaultFalloff:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/setDefaultTimeToLive:</TokenIdentifier>
			<Abstract type="html">Sets the time a beacon will be allowed to remain in the known beacons list</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)setDefaultTimeToLive:(NSUInteger)ttl</Declaration>
			<Parameters>
				<Parameter>
					<Name>ttl</Name>
					<Abstract type="html">the number of seconds a beacon will remain &quot;known&quot;</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDefaultTimeToLive:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/setDefaultSignalCeiling:</TokenIdentifier>
			<Abstract type="html">Sets the default minimum signal strength that the SDK will pay attention too</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)setDefaultSignalCeiling:(NSInteger)ceiling</Declaration>
			<Parameters>
				<Parameter>
					<Name>ceiling</Name>
					<Abstract type="html">minimum signal strength</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDefaultSignalCeiling:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/includeBetaTours</TokenIdentifier>
			<Abstract type="html">Tell the beacon manager to request beta sites in addition to normal ones</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)includeBetaTours</Declaration>
			
			
			<Anchor>//api/name/includeBetaTours</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/startScanningForBeacons</TokenIdentifier>
			<Abstract type="html">Start the beacon manager scanning for beacons</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)startScanningForBeacons</Declaration>
			
			
			<Anchor>//api/name/startScanningForBeacons</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/isScanning</TokenIdentifier>
			<Abstract type="html">Get whether or not the beacon manager is actively scanning for beacons</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)isScanning</Declaration>
			
			<ReturnValue><Abstract type="html">a boolean indicating the scanning state</Abstract></ReturnValue>
			<Anchor>//api/name/isScanning</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/isPaused</TokenIdentifier>
			<Abstract type="html">Get whether or not the beacon manager is actively scanning for beacons</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (BOOL)isPaused</Declaration>
			
			<ReturnValue><Abstract type="html">a boolean indicating the paused state</Abstract></ReturnValue>
			<Anchor>//api/name/isPaused</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/stopScanningForBeacons</TokenIdentifier>
			<Abstract type="html">Stop the beacon manager from scanning for beacons</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)stopScanningForBeacons</Declaration>
			
			
			<Anchor>//api/name/stopScanningForBeacons</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/pauseScanningForBeacons</TokenIdentifier>
			<Abstract type="html">Pause the beacon manager from scanning for beacons</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)pauseScanningForBeacons</Declaration>
			
			
			<Anchor>//api/name/pauseScanningForBeacons</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/knownBeacons</TokenIdentifier>
			<Abstract type="html">Get a list of the beacons currently in range</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (NSArray *)knownBeacons</Declaration>
			
			<ReturnValue><Abstract type="html">an array of GeLoBeacon instances</Abstract></ReturnValue>
			<Anchor>//api/name/knownBeacons</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/nearestBeacon</TokenIdentifier>
			<Abstract type="html">Get the nearest beacon</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (GeLoBeacon *)nearestBeacon</Declaration>
			
			<ReturnValue><Abstract type="html">an instance of GeLoBeacon</Abstract></ReturnValue>
			<Anchor>//api/name/nearestBeacon</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/knownTours</TokenIdentifier>
			<Abstract type="html">Fetches the list of sites from the remote host.  Returns currently known sites initially, then sends a notification
with the updated list after the remote host has responded.</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (NSArray *)knownTours</Declaration>
			
			<ReturnValue><Abstract type="html">array of GeLoSites</Abstract></ReturnValue>
			<Anchor>//api/name/knownTours</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/currentTour</TokenIdentifier>
			<Abstract type="html">Get the current tour that the beacon manager is using to determin beacon info</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (GeLoTour *)currentTour</Declaration>
			
			<ReturnValue><Abstract type="html">an instance of GeLoTour</Abstract></ReturnValue>
			<Anchor>//api/name/currentTour</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/currentSite</TokenIdentifier>
			<Abstract type="html">Get the current site the the beacon maanger is using</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (GeLoSite *)currentSite</Declaration>
			
			<ReturnValue><Abstract type="html">an instance of GeLoSite</Abstract></ReturnValue>
			<Anchor>//api/name/currentSite</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/infoForBeaconId:</TokenIdentifier>
			<Abstract type="html">Get information about a beacon in the context of the current site</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (GeLoBeaconInfo *)infoForBeaconId:(NSNumber *)beaconId</Declaration>
			<Parameters>
				<Parameter>
					<Name>beaconId</Name>
					<Abstract type="html">id of a beacon</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an instance of GeLoBeaconInfo</Abstract></ReturnValue>
			<Anchor>//api/name/infoForBeaconId:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/loadTourById:</TokenIdentifier>
			<Abstract type="html">Retreives a site from the remote host and sets it as the current site on the beacon manager</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)loadTourById:(NSNumber *)tourId</Declaration>
			<Parameters>
				<Parameter>
					<Name>tourId</Name>
					<Abstract type="html">id of a gelo site</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/loadTourById:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GeLoBeaconManager/setCurrentTour:</TokenIdentifier>
			<Abstract type="html">Set the site that the beacon manager will use with detected beacons</Abstract>
			<DeclaredIn>GeLoBeaconManager.h</DeclaredIn>
			
			<Declaration>- (void)setCurrentTour:(GeLoTour *)tour</Declaration>
			<Parameters>
				<Parameter>
					<Name>tour</Name>
					<Abstract type="html">an instance of GeLoTour</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCurrentTour:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
        
	</File>
</Tokens>